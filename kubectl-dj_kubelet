#!/bin/bash
set -euo pipefail

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"

main() {
    case ${1:-} in
    search)
        shift
        queue_search "$@"
        ;;
    playlist)
        shift
        queue_playlist "$@"
        ;;
    tracks | tr)
        shift
        show_tracks
        ;;
    access-token)
        shift
        access_token
        ;;
    help)
        shift
        print_help
        ;;
    *)
        echo >&2 "Unknown scriptname ${1:-}"
        print_help
        exit 1
        ;;
    esac
}

normalize_str() {
    # Create a Kubernetes friendly name of the track search input
    S=${1// /-}                                 # remove spaces from $1
    S=${S//:/-}                                 # replace : with -
    S=$(echo "$S" | tr "[:upper:]" "[:lower:]") # lowercase
    S=$(echo "$S" | LANG=c tr -cd '[:print:]')  # remove non ascii characters
    S=$(echo "$S" | cut -c-253)                 # trim to max 253 characters
    echo "$S"
}

access_token() {
    kubectl get secrets spotify-oauth -ojsonpath='{.data.accesstoken}' | base64 --decode
}

sp_curl() {
    #echo '[DEBUG] curl -s -H "Authorization: Bearer XXX_REDACTED_XXX"' "$@" 1>&2
    curl -s -H "Authorization: Bearer $(access_token)" "$@"
}

queue_uri() {
    local uri=$1
    name="${uri/spotify:track:/}"
    name="$(normalize_str "$name-$(date +"%s")")"
    echo "$uri" "$name"
    URI="$uri" NAME="$name" envsubst <"$DIR/track.tmpl.yaml" |
        kubectl create -f - || true
}

queue_playlist() {
    # Remove "spotify:playlist:" from the input if present
    playlist_id=${1/spotify:playlist:/}
    sp_curl "https://api.spotify.com/v1/playlists/$playlist_id/tracks" |
        jq -r '.items[].track.uri' |
        while read -r uri; do
            queue_uri "$uri"
        done
}

search() {
    sp_curl -G "https://api.spotify.com/v1/search" \
        -d "type=track" \
        --data-urlencode "q=$*" |
        jq -r '.tracks.items[] | {uri: .uri, name: .name, artists: ([.artists[].name] | join(", "))} | "\(.uri)\t\(.name)\t\t\(.artists)"'
}

queue_search() {
    if [ $# = "0" ]; then
        echo "You didn't search for anything"
        exit 1
    fi
    id=$(search "$@" | fzf | cut -f1)
    queue_uri "$id"
}

show_tracks() {
    kubectl get tracks -owide
}

print_help() {
    cat >&2 <<EOF
usage: kubectl dj-kubelet <command>

These commands exist:
    search          Search for a track and queue it.
    playlist        Queue a playlist.
    tracks          Show tracks in your namespace.
    tr              Same as tracks.
    access-token    Print your Spotify API access token, useful for epic scripts :)
    help            Print this help text.

EOF
}

main "$@"
